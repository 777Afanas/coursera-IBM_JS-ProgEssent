// массив содержит различные цветовые значения в строках, представляя цвета для карточек 
// в игре на запоминание. Эти цвета создают пары для игры. 
const colors = ['red', 'blue', 'green', 'purple', 'orange', 'pink', 'red', 'blue', 'green', 'purple', 'orange', 'pink'];

// Инициализированный путем перемешивания и присоединения массива ‘colors’, этот массив ‘cards’ 
// содержит цветовые значения для карточек в игре. Функция shuffle использует алгоритм Фишера-Йетса 
// для рандомизации порядка цветов, а затем дублирует эти цвета для создания пар, 
// формируя набор карточек для игрового процесса. 
let cards = shuffle(color.concat(colors));

// переменная служит временным хранилищем для текущих выбранных карточек 
// во время игры. Когда игрок нажимает на карточку, она добавляется 
// в этот массив для возможности сравнения пар.
let selectedCards = [];

// переменная отслеживает счет игрока на протяжении всей игры. 
// Счет увеличивается каждый раз, когда игрок успешно находит пару карточек. 
// Он обновляется и отображается, чтобы отразить прогресс и результаты игрока. 
let score = 0;

// переменная представляет оставшееся время для игрока, чтобы завершить игру. 
// Изначально установлена на определенную продолжительность, 
// она отсчитывает время по мере прогресса игры. 
// Когда она достигает нуля, игра заканчивается.
let timeLeft = 30;

// переменная управляет таймером игры. Она используется для контроля 
// механизма обратного отсчета для продолжительности игры. 
// Интервал постоянно уменьшает переменную ‘timeLeft’, обновляя отображаемое время 
// и вызывая окончание игры, когда время истекает. 
let gameInterval;

// переменная присваивается HTML-элементу с ID ‘startbtn’. Обычно она представляет 
// элемент кнопки, предназначенный для начала или перезапуска игры при нажатии. 
// позволяет коду JavaScript получать доступ к этому конкретному элементу кнопки и манипулировать им.
const startbtn = document.getElementById('startbtn');

// переменная присваивается HTML-элементу с ID ‘game-container’; она ссылается на div или контейнерный элемент, 
// который динамически генерирует карточки для игры на запоминание.  
// позволяет JS манипулировать или добавлять дочерние элементы (карточки) внутри этого контейнера. 
const gameContainer = document.getElementById('game-container'); 

// переменная представляет HTML-элемент с ID ‘score’. связана с параграфом или элементом span, 
// отображающим счет игрока во время игры. JS может обновлять отображаемый счет, 
// манипулируя содержимым этого конкретного элемента.
const scoreElement = document.getElementById('csore'); 

// переменная ссылается на HTML-элемент, идентифицированный по ID ‘timer’. 
// предположительно, связана с параграфом или элементом span, 
// который отображает оставшееся время для игрока, чтобы завершить игру. 
// JS может обновлять этот элемент, чтобы отразить обратный отсчет 
// и уведомить игрока о времени, оставшемся до завершения.
const timerElement = document.getElementById('timer');

// отвечаtn за динамическое создание элементов карты в 
// контейнере игры на основе массива 'cards', который содержит 
// значения цветов для карт. Эта функция динамически создает 
// элементы карт внутри div с классом game-container. 
function generateCards() {
    
// цикл 'for…of' для перебора каждого элемента (цвета) в массиве 'cards'. 
// Для каждого цвета в массиве 'cards' 
    for (const color of cards) {
// Внутри цикла создается новый HTML элемент div с помощью document.createElement('div'), 
// который представляет карту в игре.
        const card = document.createElement('div');
// К созданному элементу 'div' добавляется класс 'card', который  
//может содержать CSS стили или правила для оформления элементов карт.        
        card.classList.add('card');

// Атрибут 'dataset.color' элемента карты устанавливается в текущее значение цвета из массива 'cards'. 
// Он представляет скрытый цвет карты до тех пор, пока игрок не нажмет на нее.        
        card.dataset.color = color;

// Текстовое содержимое каждой карты изначально устанавливается на вопросительный знак ('?') 
// с помощью card.textContent = '?', что означает - цвет карты скрыт, пока игрок не нажмет на нее.        
        card.textContent = '?';
// добавляет каждый элемент карты в интерфейс игры внутри назначенного контейнера.        
        gameContainer.appendChild(card);
    }
}

    // отвечает за перемешивание элементов массива в случайном порядке. 
    // использует алгоритм перемешивания Фишера-Йетса, для рандомизации порядка элементов в массиве. 
    // принимает массив в качестве аргумента, который содержит еще не перемешанные элементы.
function shuffle(array) {
    // цикл проходит в обратном порядке по массиву, начиная с последнего индекса
    // и продолжается, пока не завершится перебор всего массива, перемешивая элементы по пути.
    // после завершения цикла возвращается массив с элементами, переставленными в случайном порядке.
        for (let i = array.length - 1; i > 0; i--) {
        // В каждой итерации генерируетcя случайный индекс 'j',          
        // который представляет случайный индекс внутри массива.
            const j = Math.floor(Math.random() * (i + 1)); 
        // Затем элементы по индексам 'i' и 'j' с помощью деструктурирующего 
        // присваивания меняются местами (меняются местами значения на позициях 'i' и 'j' без необходимости временной переменной)
            [array[i], array[j]] = [array[j], array[i]];
        }
        return array;
}

    // управляет логикой, когда пользователь нажимает на карту в игре на соответствие памяти. 
function handleCardClick(event) {
        const card = event.target;
        if (!card.classList.contains('card') || card.classList.contains('matched')) {
            return;
        }
        card.textContent = card.dataset.color;
        card.style.backgroundColor = card.dataset.color;
        selectedCards.push(card);
        if (selectedCards.length === 2) {
            setTimeout(checkMatch, 500);
        }
}

// оценивает, совпадают ли две выбранные карты друг с другом в игре на соответствие памяти. 
function checkMatch(){
    const [card1, card2] = selectedCards;
    if (card1.dataset.color === card2.dataset.color) {
        card1.classList.add('matched');
        card2.classList.add('matched');
        score += 2;
        scoreElement.textContent = `Score: ${score}`;         
    } else {
        card1.textContent = '?';
        card2.textContent = '?';
        card1.style.backgroundColor = '#ddd';
        card2.style.backgroundColor = '#ddd';
    }
    selectedCards = [];
}
